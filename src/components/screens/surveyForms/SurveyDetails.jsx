import {
  FormControlLabel,
  Grid,
  Stack,
  ToggleButton,
  ToggleButtonGroup,
} from '@mui/material'
import React, {useEffect, useState} from 'react'
import WbButton from '../../common/WbButton'
import WbOutlineButton from '../../common/WbOutlineButton'
import WbAlert from '../../common/WbAlert'
import WbSwitch from '../../common/WbSwitch'
import {AUDIENCE, CUSTOMER_TYPE} from '../../../utils/constants'
import useCustomerData from '../../../hooks/useCustomerData'

export default function SurveyDetails({survey, onComplete, onCancel}) {
  const customer = useCustomerData()

  const [participants, setParticipants] = useState([])
  const [isAnonimous, setIsAnonimous] = useState(true)
  const [sharedResults, setSharedResult] = useState(true)

  useEffect(() => {
    if (survey) {
      setIsAnonimous(survey.anonymous)
      setSharedResult(survey.sharedResults)
      setParticipants(getSelectedParticipants())
    }
  }, [])

  const getSelectedParticipants = () => {
    switch (survey.audience) {
      case AUDIENCE.STUDENT:
        return ['students']
      case AUDIENCE.PARENT:
        return ['parents']
      case AUDIENCE.STAFF:
        return ['staff']

      case AUDIENCE.STUDENT + AUDIENCE.PARENT:
        return ['students', 'parents']
      case AUDIENCE.STUDENT + AUDIENCE.STAFF:
        return ['students', 'staff']
      case AUDIENCE.PARENT + AUDIENCE.STAFF:
        return ['parents', 'staff']
      case AUDIENCE.STUDENT + AUDIENCE.PARENT + AUDIENCE.STAFF:
        return ['students', 'parents', 'staff']
    }
  }

  const onContinue = () => {
    if (!participants || participants.length === 0) {
      WbAlert({message: 'Please select at least one audience', type: 'error'})
      return
    }
    let name = 'New Survey'
    let audience = []
    if (participants.includes('students')) audience.push(AUDIENCE.STUDENT)
    if (participants.includes('parents')) audience.push(AUDIENCE.PARENT)
    if (participants.includes('staff')) audience.push(AUDIENCE.STAFF)
    let p = 0
    audience.map(a => (p = p + a))
    debugger
    let survey = {
      name: name,
      audience: p,
      anonymous: isAnonimous,
      sharedResults: sharedResults,
      schoolId: customer.customerType == CUSTOMER_TYPE.School ? customer.id : 0,
      matId: customer.customerType == CUSTOMER_TYPE.MAT ? customer.id : 0,
      templateImage: '',
    }

    onComplete(survey)
  }

  return (
    <Grid container>
      <Grid item lg={12} md={12} sm={12} xs={12}>
        <Stack mt={5} mx="auto" sx={{width: '350px'}}>
          <ToggleButtonGroup
            orientation="vertical"
            value={participants}
            onChange={(e, val) => setParticipants(val)}
            className="audience-selection"
          >
            <div className="staff-survey">
              <ToggleButton
                value={'staff'}
                sx={{justifyContent: 'start'}}
                disableRipple
              >
                <Stack direction="row" spacing={2} alignItems="center">
                  <svg
                    width="32"
                    height="32"
                    viewBox="0 0 32 32"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M29.2975 26.25C27.5837 23.2421 24.9076 20.8984 21.7 19.5962C23.2951 18.3999 24.4734 16.732 25.0679 14.8288C25.6624 12.9256 25.643 10.8836 25.0125 8.99208C24.382 7.10052 23.1723 5.45529 21.5547 4.28945C19.9372 3.1236 17.9939 2.49625 16 2.49625C14.0061 2.49625 12.0628 3.1236 10.4452 4.28945C8.82772 5.45529 7.61802 7.10052 6.9875 8.99208C6.35698 10.8836 6.3376 12.9256 6.93212 14.8288C7.52663 16.732 8.70489 18.3999 10.3 19.5962C7.0924 20.8984 4.4163 23.2421 2.70249 26.25C2.5963 26.4207 2.52552 26.6111 2.49437 26.8098C2.46322 27.0084 2.47232 27.2113 2.52115 27.4064C2.56997 27.6014 2.65752 27.7847 2.77858 27.9452C2.89964 28.1058 3.05175 28.2404 3.22586 28.341C3.39997 28.4416 3.59253 28.5061 3.79209 28.5308C3.99165 28.5555 4.19414 28.5398 4.38752 28.4847C4.58089 28.4296 4.76121 28.3361 4.91775 28.2099C5.07429 28.0837 5.20386 27.9273 5.29874 27.75C7.56374 23.835 11.5637 21.5 16 21.5C20.4362 21.5 24.4362 23.8362 26.7012 27.75C26.9069 28.0807 27.2331 28.3184 27.6108 28.4129C27.9885 28.5075 28.3882 28.4514 28.7254 28.2566C29.0626 28.0618 29.3108 27.7436 29.4175 27.3691C29.5243 26.9946 29.4812 26.5933 29.2975 26.25ZM9.49999 12C9.49999 10.7144 9.88121 9.45771 10.5954 8.38879C11.3097 7.31987 12.3248 6.48675 13.5126 5.99478C14.7003 5.50281 16.0072 5.37409 17.2681 5.62489C18.529 5.8757 19.6871 6.49476 20.5962 7.4038C21.5052 8.31284 22.1243 9.47103 22.3751 10.7319C22.6259 11.9928 22.4972 13.2997 22.0052 14.4874C21.5132 15.6752 20.6801 16.6903 19.6112 17.4045C18.5423 18.1188 17.2856 18.5 16 18.5C14.2767 18.498 12.6245 17.8126 11.406 16.594C10.1874 15.3754 9.50198 13.7233 9.49999 12Z"
                      fill="#FF5939"
                    />
                  </svg>
                  <span>Staff Survey</span>
                </Stack>
              </ToggleButton>
            </div>
            <div className="student-survey">
              <ToggleButton
                value={'students'}
                sx={{justifyContent: 'start'}}
                disableRipple
              >
                <Stack direction="row" spacing={2} alignItems="center">
                  <svg
                    width="32"
                    height="32"
                    viewBox="0 0 32 32"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M28.3162 7.05126L16.3162 3.05126C16.111 2.98283 15.889 2.98283 15.6838 3.05126L3.68375 7.05126C3.48463 7.11764 3.31145 7.24499 3.18873 7.41527C3.06601 7.58555 2.99998 7.79012 3 8.00001V18C3 18.2652 3.10536 18.5196 3.29289 18.7071C3.48043 18.8947 3.73478 19 4 19C4.26522 19 4.51957 18.8947 4.70711 18.7071C4.89464 18.5196 5 18.2652 5 18V9.38751L9.19875 10.7863C8.0832 12.5885 7.72846 14.7598 8.21242 16.8234C8.69638 18.887 9.97949 20.6742 11.78 21.7925C9.53 22.675 7.585 24.2713 6.1625 26.4538C6.08852 26.5637 6.03713 26.6873 6.01133 26.8173C5.98552 26.9473 5.98581 27.0811 6.01218 27.211C6.03854 27.3408 6.09046 27.4642 6.16492 27.5738C6.23937 27.6834 6.33488 27.7772 6.44588 27.8496C6.55688 27.922 6.68117 27.9716 6.81151 27.9955C6.94185 28.0195 7.07566 28.0173 7.20514 27.9891C7.33463 27.9608 7.45722 27.9072 7.56577 27.8311C7.67433 27.7551 7.7667 27.6583 7.8375 27.5463C9.72125 24.6563 12.6962 23 16 23C19.3037 23 22.2788 24.6563 24.1625 27.5463C24.3092 27.7643 24.5357 27.9158 24.7932 27.968C25.0507 28.0203 25.3184 27.9692 25.5385 27.8256C25.7586 27.6821 25.9133 27.4577 25.9692 27.201C26.0252 26.9443 25.9779 26.6759 25.8375 26.4538C24.415 24.2713 22.4625 22.675 20.22 21.7925C22.0188 20.6742 23.3007 18.8882 23.7846 16.8261C24.2684 14.764 23.9148 12.5942 22.8013 10.7925L28.3162 8.95501C28.5154 8.88867 28.6886 8.76134 28.8114 8.59106C28.9342 8.42078 29.0002 8.21618 29.0002 8.00626C29.0002 7.79634 28.9342 7.59175 28.8114 7.42147C28.6886 7.25118 28.5154 7.12385 28.3162 7.05751V7.05126ZM22 15C22.0003 15.9486 21.7756 16.8837 21.3445 17.7286C20.9134 18.5736 20.2881 19.3043 19.5199 19.8608C18.7517 20.4172 17.8625 20.7836 16.9253 20.9299C15.9881 21.0762 15.0295 20.9982 14.1283 20.7023C13.2271 20.4064 12.4088 19.901 11.7407 19.2277C11.0726 18.5543 10.5737 17.7321 10.2849 16.8286C9.99607 15.9251 9.92559 14.9659 10.0792 14.0299C10.2329 13.0938 10.6063 12.2076 11.1687 11.4438L15.6838 12.9438C15.889 13.0122 16.111 13.0122 16.3162 12.9438L20.8312 11.4438C21.5909 12.4738 22.0005 13.7201 22 15ZM16 10.9463L7.1625 8.00001L16 5.05376L24.8375 8.00001L16 10.9463Z"
                      fill="#53B5E0"
                    />
                    <path
                      fill-rule="evenodd"
                      clip-rule="evenodd"
                      d="M28.5162 6.92287V6.9071L16.3795 2.86151C16.1332 2.7794 15.8668 2.7794 15.6205 2.86152L3.62049 6.86151C3.38155 6.94117 3.17372 7.09399 3.02646 7.29832C2.87921 7.50265 2.79997 7.74814 2.79999 8C2.79999 8 2.79999 8.00001 2.79999 8V18C2.79999 18.3183 2.92642 18.6235 3.15146 18.8485C3.3765 19.0736 3.68173 19.2 3.99999 19.2C4.31825 19.2 4.62347 19.0736 4.84852 18.8485C5.07356 18.6235 5.19999 18.3183 5.19999 18V9.66493L8.89933 10.8973C7.85836 12.7005 7.54084 14.8358 8.01769 16.869C8.48443 18.8592 9.67634 20.5986 11.3529 21.7521C9.21283 22.6748 7.36474 24.2434 5.99573 26.3433C5.9074 26.475 5.84602 26.6228 5.81514 26.7783C5.78417 26.9343 5.78452 27.0949 5.81616 27.2507C5.8478 27.4066 5.91011 27.5546 5.99945 27.6862C6.0888 27.8177 6.2034 27.9302 6.3366 28.0171C6.46981 28.104 6.61895 28.1635 6.77536 28.1922C6.93178 28.221 7.09234 28.2183 7.24772 28.1845C7.40311 28.1506 7.55021 28.0862 7.68048 27.995C7.81035 27.904 7.92091 27.7882 8.00577 27.6543C9.85458 24.8187 12.7677 23.2 16 23.2C19.2327 23.2 22.1462 24.8191 23.9949 27.6555L23.9966 27.6579C24.1726 27.9195 24.4444 28.1013 24.7534 28.164C25.0624 28.2268 25.3837 28.1654 25.6477 27.9931C25.9118 27.8209 26.0975 27.5516 26.1646 27.2436C26.2318 26.9355 26.175 26.6134 26.0066 26.3469L26.005 26.3445C24.6359 24.2439 22.7809 22.6751 20.6465 21.7523C22.3216 20.5989 23.5126 18.8606 23.9793 16.8718C24.456 14.84 24.1396 12.7062 23.1005 10.9036L28.3795 9.14475C28.6184 9.06514 28.8263 8.91234 28.9736 8.70801C29.1209 8.50367 29.2002 8.25815 29.2002 8.00625C29.2002 7.75435 29.1209 7.50883 28.9736 7.3045C28.8552 7.14023 28.6976 7.00927 28.5162 6.92287ZM22.9067 10.9682C22.8724 10.9092 22.8372 10.8507 22.8012 10.7925L28.3162 8.955C28.5154 8.88866 28.6886 8.76133 28.8114 8.59105C28.9342 8.42077 29.0002 8.21617 29.0002 8.00625C29.0002 7.79633 28.9342 7.59174 28.8114 7.42145C28.6886 7.25117 28.5154 7.12384 28.3162 7.0575V7.05125L16.3162 3.05125C16.111 2.98282 15.889 2.98282 15.6837 3.05125L3.68374 7.05125C3.48462 7.11763 3.31143 7.24498 3.18872 7.41526C3.066 7.58553 2.99997 7.79011 2.99999 8V18C2.99999 18.2652 3.10534 18.5196 3.29288 18.7071C3.48042 18.8946 3.73477 19 3.99999 19C4.2652 19 4.51956 18.8946 4.70709 18.7071C4.89463 18.5196 4.99999 18.2652 4.99999 18V9.3875L9.19874 10.7863C9.16274 10.8444 9.12753 10.903 9.09312 10.9619C8.06116 12.7285 7.74406 14.8264 8.21241 16.8234C8.67764 18.8071 9.88137 20.5354 11.5733 21.6597C11.6414 21.705 11.7103 21.7492 11.78 21.7925C11.7036 21.8225 11.6276 21.8532 11.552 21.8848C9.39858 22.784 7.53671 24.3453 6.16249 26.4538C6.08851 26.5637 6.03712 26.6873 6.01131 26.8173C5.98551 26.9472 5.9858 27.0811 6.01216 27.2109C6.03853 27.3408 6.09045 27.4642 6.16491 27.5738C6.23936 27.6834 6.33486 27.7772 6.44587 27.8496C6.55687 27.922 6.68115 27.9716 6.8115 27.9955C6.94184 28.0195 7.07565 28.0173 7.20513 27.989C7.33462 27.9608 7.4572 27.9071 7.56576 27.8311C7.67432 27.7551 7.76668 27.6583 7.83749 27.5463C9.72124 24.6563 12.6962 23 16 23C19.3037 23 22.2787 24.6563 24.1625 27.5463C24.3092 27.7642 24.5357 27.9158 24.7932 27.968C25.0507 28.0203 25.3184 27.9691 25.5385 27.8256C25.7585 27.6821 25.9133 27.4577 25.9692 27.201C26.0252 26.9443 25.9779 26.6758 25.8375 26.4538C24.4633 24.3454 22.5946 22.7842 20.4477 21.885C20.3721 21.8533 20.2962 21.8225 20.22 21.7925C20.2896 21.7492 20.3584 21.705 20.4264 21.6598C22.1167 20.5356 23.3194 18.8084 23.7845 16.8261C24.2528 14.8306 23.9368 12.7342 22.9067 10.9682ZM21.8 14.9999C21.8005 13.8111 21.4348 12.6521 20.7547 11.6799L16.3795 13.1335C16.1332 13.2156 15.8668 13.2156 15.6205 13.1335L11.2454 11.68C10.7486 12.3911 10.4173 13.2051 10.2766 14.0623C10.1281 14.9671 10.1962 15.8943 10.4754 16.7677C10.7546 17.6411 11.2369 18.4359 11.8827 19.0868C12.5285 19.7377 13.3195 20.2262 14.1907 20.5123C15.0619 20.7983 15.9885 20.8737 16.8945 20.7323C17.8004 20.5909 18.66 20.2367 19.4026 19.6988C20.1452 19.1608 20.7496 18.4545 21.1664 17.6377C21.5831 16.821 21.8002 15.9169 21.8 14.9999ZM11.1687 11.4438C10.6062 12.2075 10.2329 13.0938 10.0792 14.0299C9.92557 14.9659 9.99606 15.925 10.2849 16.8286C10.5737 17.7321 11.0726 18.5543 11.7407 19.2277C12.4088 19.901 13.2271 20.4064 14.1283 20.7023C15.0295 20.9982 15.9881 21.0762 16.9253 20.9299C17.8625 20.7836 18.7517 20.4172 19.5199 19.8607C20.2881 19.3043 20.9134 18.5736 21.3445 17.7286C21.7756 16.8837 22.0003 15.9486 22 15C22.0005 13.7201 21.5909 12.4738 20.8312 11.4438L16.3162 12.9438C16.111 13.0122 15.889 13.0122 15.6837 12.9438L11.1687 11.4438ZM16 10.7354L24.2051 8L16 5.26457L7.79486 8L16 10.7354ZM16 10.9463L24.8375 8L16 5.05375L7.16249 8L16 10.9463Z"
                      fill="#53B5E0"
                    />
                  </svg>
                  <span>Student Survey</span>
                </Stack>
              </ToggleButton>
            </div>

            <div className="parent-survey">
              <ToggleButton
                value={'parents'}
                sx={{justifyContent: 'start'}}
                disableRipple
              >
                <Stack direction="row" spacing={2} alignItems="center">
                  <svg
                    width="32"
                    height="32"
                    viewBox="0 0 32 32"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M9.33335 12C10.2174 12 11.0653 11.6488 11.6904 11.0237C12.3155 10.3986 12.6667 9.55071 12.6667 8.66666C12.6667 7.7826 12.3155 6.93476 11.6904 6.30963C11.0653 5.68451 10.2174 5.33332 9.33335 5.33332C8.4493 5.33332 7.60145 5.68451 6.97633 6.30963C6.35121 6.93476 6.00002 7.7826 6.00002 8.66666C6.00002 9.55071 6.35121 10.3986 6.97633 11.0237C7.60145 11.6488 8.4493 12 9.33335 12ZM9.33335 14.6667C8.54542 14.6667 7.76521 14.5115 7.03725 14.2099C6.3093 13.9084 5.64786 13.4664 5.09071 12.9093C4.53356 12.3521 4.0916 11.6907 3.79008 10.9628C3.48855 10.2348 3.33335 9.45459 3.33335 8.66666C3.33335 7.87873 3.48855 7.09851 3.79008 6.37056C4.0916 5.6426 4.53356 4.98117 5.09071 4.42402C5.64786 3.86686 6.3093 3.42491 7.03725 3.12338C7.76521 2.82185 8.54542 2.66666 9.33335 2.66666C10.9247 2.66666 12.4508 3.2988 13.576 4.42402C14.7012 5.54923 15.3334 7.07536 15.3334 8.66666C15.3334 10.258 14.7012 11.7841 13.576 12.9093C12.4508 14.0345 10.9247 14.6667 9.33335 14.6667ZM23.3334 17.3333C24.0406 17.3333 24.7189 17.0524 25.219 16.5523C25.7191 16.0522 26 15.3739 26 14.6667C26 13.9594 25.7191 13.2811 25.219 12.781C24.7189 12.2809 24.0406 12 23.3334 12C22.6261 12 21.9478 12.2809 21.4477 12.781C20.9476 13.2811 20.6667 13.9594 20.6667 14.6667C20.6667 15.3739 20.9476 16.0522 21.4477 16.5523C21.9478 17.0524 22.6261 17.3333 23.3334 17.3333ZM23.3334 20C21.9189 20 20.5623 19.4381 19.5621 18.4379C18.5619 17.4377 18 16.0811 18 14.6667C18 13.2522 18.5619 11.8956 19.5621 10.8954C20.5623 9.89523 21.9189 9.33332 23.3334 9.33332C24.7478 9.33332 26.1044 9.89523 27.1046 10.8954C28.1048 11.8956 28.6667 13.2522 28.6667 14.6667C28.6667 16.0811 28.1048 17.4377 27.1046 18.4379C26.1044 19.4381 24.7478 20 23.3334 20ZM26.6667 28V27.3333C26.6667 26.4493 26.3155 25.6014 25.6904 24.9763C25.0653 24.3512 24.2174 24 23.3334 24C22.4493 24 21.6015 24.3512 20.9763 24.9763C20.3512 25.6014 20 26.4493 20 27.3333V28H17.3334V27.3333C17.3334 26.5454 17.4885 25.7652 17.7901 25.0372C18.0916 24.3093 18.5336 23.6478 19.0907 23.0907C19.6479 22.5335 20.3093 22.0916 21.0373 21.79C21.7652 21.4885 22.5454 21.3333 23.3334 21.3333C24.1213 21.3333 24.9015 21.4885 25.6295 21.79C26.3574 22.0916 27.0188 22.5335 27.576 23.0907C28.1331 23.6478 28.5751 24.3093 28.8766 25.0372C29.1782 25.7652 29.3334 26.5454 29.3334 27.3333V28H26.6667ZM13.3334 28V22.6667C13.3334 22.1414 13.2299 21.6212 13.0289 21.1359C12.8279 20.6506 12.5332 20.2097 12.1618 19.8382C11.7903 19.4668 11.3494 19.1722 10.8641 18.9711C10.3788 18.7701 9.85864 18.6667 9.33335 18.6667C8.80807 18.6667 8.28792 18.7701 7.80262 18.9711C7.31732 19.1722 6.87636 19.4668 6.50493 19.8382C6.13349 20.2097 5.83885 20.6506 5.63784 21.1359C5.43682 21.6212 5.33335 22.1414 5.33335 22.6667V28H2.66669V22.6667C2.66669 20.8985 3.36907 19.2029 4.61931 17.9526C5.86955 16.7024 7.56524 16 9.33335 16C11.1015 16 12.7972 16.7024 14.0474 17.9526C15.2976 19.2029 16 20.8985 16 22.6667V28H13.3334Z"
                      fill="#45338C"
                    />
                  </svg>
                  <span>Parent Survey</span>
                </Stack>
              </ToggleButton>
            </div>
          </ToggleButtonGroup>
        </Stack>
      </Grid>

      <Grid item lg={12} md={12} sm={12} xs={12}>
        <Stack direction="column" alignItems="center">
          <FormControlLabel
            control={
              <WbSwitch
                checked={isAnonimous}
                onChange={() => setIsAnonimous(!isAnonimous)}
              />
            }
            label="Anonymous survey"
          ></FormControlLabel>

          {customer.customerType === CUSTOMER_TYPE.MAT && (
            <FormControlLabel
              control={
                <WbSwitch
                  checked={sharedResults}
                  onChange={() => setSharedResult(!sharedResults)}
                />
              }
              label="Share survey and result with schools"
            ></FormControlLabel>
          )}
        </Stack>

        <Stack direction="row" mt={4} spacing={1} justifyContent="end">
          <WbOutlineButton
            CustomOutlineButtonText={'Cancel'}
            onClick={onCancel}
          ></WbOutlineButton>
          <WbButton
            CustomButtonText={'Continue'}
            onClick={onContinue}
          ></WbButton>
        </Stack>
      </Grid>
    </Grid>
  )
}
